# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо
# использовать формулу: (выработка в часах*ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать
# скрипт с параметрами.
#
# from sys import argv
#
# if len(argv) > 1:
#     name_script,time_w, sal, bonus = argv
#     time_w = float(time_w)
#     sal = int(sal)
#     bonus = int(bonus)
#     res = time_w * sal + bonus
#     print(f'Заработная плата сотрудника: {res}')
# else:
#     time_w = float(input('Выработка в часах: '))
#     sal = int(input('Ставка в час:'))
#     bonus = int(input('Премия:'))
#     res = time_w * sal + bonus
#     print(f'Заработная плата сотрудника: {res}')

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
#
# my_list = [2, 4, 7, 5, 8, 10]
# my_new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]]
# print(f'Исходный список {my_list}')
# print(f'Новый список {my_new_list}')

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
#

# print(f'Числа от 20 до 240 кратные 20 или 21 - {[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}')

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих
# требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
#
# my_list = [2, 2, 2, 3, 3, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# my_new_list = [el for el in my_list if my_list.count(el) < 2]
# print(my_new_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100
# до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
#

# from functools import reduce
#
# def my_func(prev_el, el):
#     return prev_el * el
# print(f'Список четных значений {[el for el in range(99, 1001) if el % 2 == 0]}')
# print(f'Результат перемножения всех элементов списка {reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}')

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
#
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо
# предусмотреть условие, при котором повторение элементов списка будет прекращено.

# from itertools import count
#
# for el in count(3):
#     if el > 10:
#         break
#     else:
#         print(el)
#
# from itertools import cycle
#
# a = 0
# for el in cycle("136"):
#     if a > 10:
#         break
#     print(el)
#     a += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться
# объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial


def fact(n: int):
    """
    Функция генерирующая факториала вплоть до n
    :param n: число, вплоть до которого нужно вычислить факториал
    """
    for i in range(1, n + 1):
        yield factorial(i)


if __name__ == '__main__':
    input_data = input('Пожалуйста введите количество вычисленных факториалов: ')

    try:
        value = int(input_data)
    except ValueError as e:
        print(e)
        exit(1)

    for el in fact(value):
        print(el)
